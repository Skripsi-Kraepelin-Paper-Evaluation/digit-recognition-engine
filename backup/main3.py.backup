import fitz  # PyMuPDF
import cv2
import numpy as np
import os
from PIL import Image, ImageDraw, ImageFont

def pdf_to_png(pdf_path, output_path="output.png", dpi=400):
    """
    Konversi PDF ke PNG dengan DPI tinggi
    
    Parameters:
    pdf_path: Path ke file PDF
    output_path: Path output PNG
    dpi: Resolusi output (default 300 untuk kualitas tinggi)
    
    Returns:
    tuple: (width, height) dari image yang dihasilkan
    """
    try:
        # Buka PDF
        pdf_document = fitz.open(pdf_path)
        page = pdf_document[0]  # Ambil halaman pertama
        
        # Hitung matrix untuk DPI yang diinginkan
        # Default PyMuPDF = 72 DPI
        zoom = dpi / 72.0
        mat = fitz.Matrix(zoom, zoom)
        
        # Render ke pixmap
        pix = page.get_pixmap(matrix=mat)
        
        # Simpan sebagai PNG
        pix.save(output_path)
        
        width, height = pix.width, pix.height
        pdf_document.close()
        
        print(f"PDF berhasil dikonversi ke PNG:")
        print(f"  Input: {pdf_path}")
        print(f"  Output: {output_path}")
        print(f"  Resolusi: {width}x{height} pixels ({dpi} DPI)")
        
        return width, height
        
    except Exception as e:
        print(f"Error konversi PDF ke PNG: {e}")
        return None, None

def cartesian_to_image_coordinates(x, y, image_height):
    """
    Konversi koordinat Kartesian ke koordinat image
    
    Kartesian: (0,0) di kiri bawah, Y naik ke atas
    Image: (0,0) di kiri atas, Y naik ke bawah
    
    Parameters:
    x, y: koordinat Kartesian
    image_height: tinggi image
    
    Returns:
    tuple: (x_img, y_img) koordinat image
    """
    x_img = x
    y_img = image_height - y  # Flip koordinat Y
    return int(x_img), int(y_img)

def draw_cartesian_grid_on_png(image_path, output_path="grid_output.png", 
                               start_x=11, start_y=11, 
                               width=28, height=16,
                               x_increment=32, y_increment=16,
                               rows=55, cols=40,
                               dpi_scale=1.0, show_labels=True):
    """
    Menggambar grid dengan koordinat Kartesian pada PNG
    
    Parameters:
    image_path: Path ke file PNG
    output_path: Path output PNG dengan grid
    start_x, start_y: Titik mulai grid dalam koordinat Kartesian
    width, height: Ukuran setiap cell
    x_increment, y_increment: Jarak antar cell
    rows, cols: Jumlah baris dan kolom
    dpi_scale: Faktor skala untuk menyesuaikan dengan DPI (misal: 300/72 = 4.17)
    show_labels: Tampilkan label koordinat
    
    Returns:
    int: Jumlah rectangle yang digambar
    """
    try:
        # Baca image
        image = cv2.imread(image_path)
        if image is None:
            print(f"Error: Tidak bisa membaca image {image_path}")
            return 0
            
        image_height, image_width = image.shape[:2]
        print(f"Ukuran image: {image_width}x{image_height} pixels")
        
        # Konversi ke PIL untuk drawing yang lebih baik
        image_pil = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(image_pil)
        
        # Try to load font, fall back to default if not available
        try:
            font = ImageFont.truetype("arial.ttf", int(12 * dpi_scale))
            small_font = ImageFont.truetype("arial.ttf", int(8 * dpi_scale))
        except:
            try:
                font = ImageFont.load_default()
                small_font = ImageFont.load_default()
            except:
                font = None
                small_font = None
        
        print(f"Membuat grid {rows}x{cols} dengan koordinat Kartesian...")
        print(f"DPI scale factor: {dpi_scale}")
        print(f"Start position: ({start_x}, {start_y})")
        
        count = 0
        
        # Scale koordinat sesuai DPI
        scaled_start_x = start_x * dpi_scale
        scaled_start_y = start_y * dpi_scale
        scaled_width = width * dpi_scale
        scaled_height = height * dpi_scale
        scaled_x_inc = x_increment * dpi_scale
        scaled_y_inc = y_increment * dpi_scale
        
        for row in range(rows):
            for col in range(cols):
                # Koordinat Kartesian (belum di-scale)
                cart_x1 = start_x + (col * x_increment)
                cart_y1 = start_y + (row * y_increment)  # Row 0 = bawah
                cart_x2 = cart_x1 + width
                cart_y2 = cart_y1 + height
                
                # Koordinat Kartesian yang sudah di-scale
                scaled_cart_x1 = scaled_start_x + (col * scaled_x_inc)
                scaled_cart_y1 = scaled_start_y + (row * scaled_y_inc)
                scaled_cart_x2 = scaled_cart_x1 + scaled_width
                scaled_cart_y2 = scaled_cart_y1 + scaled_height
                
                # Konversi ke koordinat image
                img_x1, img_y1 = cartesian_to_image_coordinates(scaled_cart_x1, scaled_cart_y2, image_height)
                img_x2, img_y2 = cartesian_to_image_coordinates(scaled_cart_x2, scaled_cart_y1, image_height)
                
                # Debug untuk beberapa cell pertama
                if count < 3:
                    print(f"Cell r{row}c{col}:")
                    print(f"  Cartesian: ({cart_x1:.1f},{cart_y1:.1f}) to ({cart_x2:.1f},{cart_y2:.1f})")
                    print(f"  Image: ({img_x1},{img_y1}) to ({img_x2},{img_y2})")
                
                # Cek batas image
                if (0 <= img_x1 < image_width and 0 <= img_y1 < image_height and
                    0 <= img_x2 < image_width and 0 <= img_y2 < image_height and
                    img_x1 < img_x2 and img_y1 < img_y2):
                    
                    # Gambar rectangle
                    draw.rectangle([img_x1, img_y1, img_x2, img_y2], 
                                 outline=(255, 0, 0), width=max(1, int(dpi_scale * 0.5)))
                    
                    # Tambahkan label
                    if show_labels and (count % 200 == 0 or count < 10):
                        label_cart_x = cart_x1 + width/2
                        label_cart_y = cart_y1 + height/2
                        label_scaled_x = label_cart_x * dpi_scale
                        label_scaled_y = label_cart_y * dpi_scale
                        
                        label_img_x, label_img_y = cartesian_to_image_coordinates(
                            label_scaled_x, label_scaled_y, image_height)
                        
                        label_text = f"r{row}c{col}"
                        if font:
                            draw.text((label_img_x, label_img_y), label_text, 
                                    fill=(0, 0, 255), font=small_font)
                        else:
                            # Fallback jika font tidak tersedia
                            pass
                        
                    count += 1
            
            # Progress
            if (row + 1) % 10 == 0:
                print(f"Progress: {row + 1}/{rows} baris selesai")
        
        # Tambahkan marker koordinat
        if show_labels:
            # Marker di (0,0) Kartesian
            origin_scaled_x = scaled_start_x
            origin_scaled_y = scaled_start_y
            origin_img_x, origin_img_y = cartesian_to_image_coordinates(
                origin_scaled_x, origin_scaled_y, image_height)
            
            # Gambar titik origin
            circle_radius = max(3, int(dpi_scale * 2))
            draw.ellipse([origin_img_x - circle_radius, origin_img_y - circle_radius,
                         origin_img_x + circle_radius, origin_img_y + circle_radius],
                        fill=(0, 255, 0))
            
            if font:
                draw.text((origin_img_x + 5, origin_img_y), "(0,0)", 
                         fill=(0, 255, 0), font=font)
        
        # Konversi kembali ke OpenCV dan simpan
        result_image = cv2.cvtColor(np.array(image_pil), cv2.COLOR_RGB2BGR)
        cv2.imwrite(output_path, result_image)
        
        print(f"\nSelesai! Grid dengan {count} rectangle disimpan: '{output_path}'")
        return count
        
    except Exception as e:
        print(f"Error menggambar grid: {e}")
        return 0

def pdf_to_png_with_cartesian_grid(pdf_path, png_output="converted.png", 
                                   grid_output="grid_result.png", dpi=400):
    """
    Pipeline lengkap: PDF -> PNG -> Grid Kartesian
    """
    print("=" * 60)
    print("PDF TO PNG WITH CARTESIAN GRID")
    print("=" * 60)
    
    # Step 1: Konversi PDF ke PNG
    print("\nStep 1: Konversi PDF ke PNG...")
    width, height = pdf_to_png(pdf_path, png_output, dpi)
    
    if width is None or height is None:
        print("Gagal konversi PDF ke PNG")
        return False
    
    # Step 2: Gambar grid Kartesian
    print(f"\nStep 2: Menggambar grid Kartesian...")
    
    # Hitung scale factor berdasarkan DPI
    dpi_scale = dpi / 72.0
    
    count = draw_cartesian_grid_on_png(
        png_output, 
        grid_output,
        start_x=12,      # Koordinat awal X
        start_y=17,        # Koordinat awal Y  
        width=24,          # Lebar cell
        height=14,         # Tinggi cell
        x_increment=29.5,    # Jarak X antar cell
        y_increment=15,    # Jarak Y antar cell
        rows=55,           # Jumlah baris
        cols=40,           # Jumlah kolom
        dpi_scale=dpi_scale,
        show_labels=True
    )
    
    if count > 0:
        print(f"\nBERHASIL!")
        print(f"Total {count} rectangle dalam grid")
        print(f"File PNG asli: {png_output}")
        print(f"File PNG dengan grid: {grid_output}")
        return True
    else:
        print("\nGAGAL membuat grid")
        return False

def demo_coordinate_explanation():
    """
    Penjelasan sistem koordinat
    """
    print("\n" + "=" * 60)
    print("PENJELASAN SISTEM KOORDINAT")
    print("=" * 60)
    print("KOORDINAT KARTESIAN (yang digunakan):")
    print("  • (0,0) di KIRI BAWAH")
    print("  • X bertambah ke KANAN")
    print("  • Y bertambah ke ATAS")
    print("  • Row 0 = baris paling BAWAH")
    print()
    print("KOORDINAT IMAGE (sistem asli):")
    print("  • (0,0) di KIRI ATAS")  
    print("  • X bertambah ke KANAN")
    print("  • Y bertambah ke BAWAH")
    print()
    print("LAYOUT GRID:")
    print("Row 54 (atas)  : [r54c0] [r54c1] ... [r54c39]")
    print("Row 53         : [r53c0] [r53c1] ... [r53c39]") 
    print("...            : ...")
    print("Row 1          : [r1c0]  [r1c1]  ... [r1c39]")
    print("Row 0 (bawah)  : [r0c0]  [r0c1]  ... [r0c39]")
    print("                 ^(0,0)")
    print("=" * 60)

# Contoh penggunaan
if __name__ == "__main__":
    demo_coordinate_explanation()
    
    # Ganti dengan path file PDF Anda
    input_pdf = "input.pdf"
    
    if os.path.exists(input_pdf):
        # Pipeline lengkap
        success = pdf_to_png_with_cartesian_grid(
            input_pdf,
            png_output="converted_image.png",
            grid_output="final_grid_result.png", 
            dpi=400  # DPI tinggi untuk kualitas bagus
        )
        
        if success:
            print(f"\n✅ SELESAI! Cek file 'final_grid_result.png'")
        else:
            print(f"\n❌ GAGAL! Periksa error di atas")
            
    else:
        print(f"\n❌ File PDF '{input_pdf}' tidak ditemukan!")
        print("Ganti variabel 'input_pdf' dengan path yang benar.")
        print("\nContoh penggunaan terpisah:")
        print("1. pdf_to_png('file.pdf', 'output.png', dpi=300)")
        print("2. draw_cartesian_grid_on_png('output.png', 'grid.png', dpi_scale=4.17)")